-- supabase/migrations/0001_initial_schema.sql

-- 1. Create sc_users table
create table if not exists public.sc_users (
    id uuid not null references auth.users on delete cascade,
    email text,
    full_name text,
    credits integer default 5,
    plan text default 'Free'::text,
    referral_code uuid default gen_random_uuid() not null,
    referred_by text,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    primary key (id),
    unique (referral_code)
);
alter table public.sc_users enable row level security;

-- 2. Create sc_messages table
create table if not exists public.sc_messages (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    full_name text,
    email text,
    message text
);
alter table public.sc_messages enable row level security;


-- 3. RLS Policies for sc_users
drop policy if exists "Allow logged-in user to view their own profile" on public.sc_users;
create policy "Allow logged-in user to view their own profile"
on public.sc_users for select
using (auth.uid() = id);

drop policy if exists "Allow user to update their own full_name" on public.sc_users;
create policy "Allow user to update their own full_name"
on public.sc_users for update
using (auth.uid() = id)
with check (auth.uid() = id);

-- 4. RLS Policies for sc_messages
drop policy if exists "Enable insert for authenticated users only" on public.sc_messages;
create policy "Enable insert for authenticated users only"
on public.sc_messages for insert
to authenticated
with check (true);


-- 5. Function to create a user profile on signup
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.sc_users (id, email, full_name)
  values (new.id, new.email, new.raw_user_meta_data->>'full_name');
  return new;
end;
$$;

-- 6. Trigger to call the function on user creation
drop trigger if exists on_auth_user_created on auth.users;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- 7. Function to decrement credits
create or replace function public.decrement_credits(p_user_id uuid)
returns void
language plpgsql
security definer set search_path = public
as $$
begin
  update public.sc_users
  set credits = credits - 1
  where id = p_user_id and credits > 0;
end;
$$;

-- 8. Function to award referral credits
create or replace function public.award_referral_credit(p_referrer_code text)
returns void
language plpgsql
security definer set search_path = public
as $$
declare
  referrer_id uuid;
begin
  -- Find the referrer's user ID from the referral code
  select id into referrer_id from public.sc_users where referral_code::text = p_referrer_code;

  -- If a referrer is found, award them credits
  if referrer_id is not null then
    update public.sc_users
    set credits = credits + 10 -- Award 10 credits
    where id = referrer_id;
  end if;
end;
$$;
