
-- 1. Create the user profile table
create table
  public.sc_users (
    id uuid not null references auth.users on delete cascade,
    full_name text null,
    credits integer not null default 5,
    plan text not null default 'Free'::text,
    referral_code text not null default extensions.uuid_generate_v4 (),
    referred_by text null,
    primary key (id),
    unique (referral_code)
  );

-- 2. Enable Row-Level Security
alter table public.sc_users enable row level security;

-- 3. Create RLS policies
create policy "Users can view their own profile" on public.sc_users for
select
  using (auth.uid () = id);

-- 4. Create function to create a new profile for each new user
create or replace function public.handle_new_user() returns trigger as $$
begin
  insert into public.sc_users (id, full_name, referral_code)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'referral_code');
  
  if new.raw_user_meta_data->>'referral_code' is not null then
    update public.sc_users
    set referred_by = new.raw_user_meta_data->>'referral_code'
    where id = new.id;
  end if;

  return new;
end;
$$ language plpgsql security definer;

-- 5. Create trigger to call the function on new user signup
create trigger on_auth_user_created
after insert on auth.users for each row
execute procedure public.handle_new_user();

-- 6. Create function to decrement credits
create or replace function decrement_credits(p_user_id uuid)
returns void as $$
begin
  update public.sc_users
  set credits = credits - 1
  where id = p_user_id and credits > 0;
end;
$$ language plpgsql security definer;

-- 7. Create function to award referral credits
create or replace function award_referral_credit(p_referrer_code text)
returns void as $$
begin
    update public.sc_users
    set credits = credits + 10
    where referral_code = p_referrer_code;
end;
$$ language plpgsql security definer;

-- 8. Create table for contact messages
create table
  public.sc_messages (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    full_name text not null,
    email text not null,
    message text not null,
    primary key (id)
  );
  
-- 9. Enable RLS for messages and set policies (only admins can see)
alter table public.sc_messages enable row level security;

-- For now, no policies are added, so only service_role can access messages.
-- This is secure. You can add policies for admin roles later if needed.
-- Example: create policy "Admins can view messages" on public.sc_messages for select using (is_admin(auth.uid()));
